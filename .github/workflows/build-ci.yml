# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Buid App

on: workflow_dispatch

jobs:
  build:
  
    permissions:
      id-token: 'write'
      
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # - name: Set up JDK 11
    #   uses: actions/setup-java@v3
    #   with:
    #     java-version: '11'
    #     distribution: 'temurin'
    #     cache: maven
    # - name: Build with Maven
    #   run: mvn -B package --file pom.xml
    # - name: upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: webapp-war
    #     path: target/WebApp.war
    #     retention-days: 2
    # - name: Download artifact
    #   uses: actions/download-artifact@v1
    #   with: 
    #     name: webapp-war
    
    # - name: Build and push image to Amazon ECR
    #   env:
    #     DCR_USER: ${{ secrets.DOCKER_USER }}
    #     DCR_PASSWD: ${{ secrets.DOCKER_PASSWORD }}
    #     IMAGE_TAG: 0.2
    #   run: |
    #     cp webapp-war/WebApp.war ./WebApp.war
    #     docker build -t yogita20/webapp:$IMAGE_TAG .
    #     docker login -u $DCR_USER -p $DCR_PASSWD
    #     echo "Pushing image to docker registry..."
    #     docker push yogita20/webapp:$IMAGE_TAG
    # - name: Gcloud Login
    #   run: |-
      
    #    echo "GCP_SECRET" | tr '[:lower:]' '[:upper:]' >> $GITHUB_ENV
    #    echo ${{ secrets[env.GCP_SECRETS] }} | base64 -d > sa.json
    #    gcloud auth activate-service-account --key-file=sa.json && sa.json   
    
    - uses: 'google-github-actions/auth@v1'
      with:
        service_account: 'my-google-cred@expanded-port-427419-h3.iam.gserviceaccount.com'
        workload_identity_provider: 'projects/64397744283/locations/global/workloadIdentityPools/github-access-gcp/providers/github-access'
    - name: set up cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: 'demo-cluster2'
        location: 'us-east1'

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    - name: deploy to GKE
      run: |-
        #kubectl create namespace test 
        #kubectl apply -f ./helm-charts/template/deployment.yaml --namespace test
        helm upgrade --install webapp-demo ./helm-charts -f ./helm-charts/values.yaml --namespace test --kubeconfig $KUBE_CONFIG_PATH --debug
        kubectl get deployments --namespace test
        
        
        
        
    
        
  
